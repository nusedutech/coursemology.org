<%= simple_form_for [@course, @assessment, @question],
                    html: { class: 'form-horizontal'},
                    defaults: { input_html: { class: 'span7' } } do |f| %>

    <% if !@parent_mpq_question.nil? %>
        <input type="hidden" name="parent_mpq_question" value="<%= @parent_mpq_question.id %>" />
    <% end %>
    <%#= f.input :description, :as => :ckeditor, :input_html => { :ckeditor => {:toolbar => 'mini'} } %>
    <%= f.input :description, as: :text, input_html:{class: "span7 text-area html-editor", rows:10}  %>
    <%= f.input :max_grade, as: :integer, input_html: {class: "number_field input-mini"} %>
    <%#= f.input :tags, as: :tag, url: course_tags_path, input_html: {class: "span7"}  %>

    <% if @parent_mpq_question.nil? %>
        <div class="control-group integer optional">
            <label class="integer optional control-label">Tags</label>
            <div class="controls">
                <% if !@tags_list.nil? %>
                    <% @tags_list.each do |key,value|%>
                    <div class="group-tag-control">
                        <div style="padding-top: 5px;"><strong><%=key%></strong></div>
                        <div style="padding-top: 5px; width: 65%">
                            <textarea style="height: 28px" id="txtar_tagging_<%=key%>" rows="1"></textarea>
                        </div>

                        <input type="hidden" class="hdf-all-tags" name="all_tags_<%=key%>" value="<%=value[:all]%>">
                        <input type="hidden" class="hdf-original-tags" name="original_tags_<%=key%>" value="<%=value[:origin]%>">
                        <input type="hidden" class="hdf-new-tags" name="new_tags_<%=key%>">
                        <input type="hidden" class="as" name="new_tags_con" value="abc123">
                    </div>
                    <% end %>
                <% end %>
            </div>
        </div>
	<% end %>

    <%= f.input :select_all, as: :boolean,
                input_html: {class: ""},
                inline_label:"Student must pick all correct answers" %>

    <div class="control-group">
      <%= f.label "Options", :class => 'control-label' %>
      <div class="controls" id="mcq-options">
        <table class="span7 table form-mcq-answer">
          <thead>
          <tr>
            <th style="width: 8%"></th>
          </tr>
          </thead>
          <tbody>
          <% i = 0 %>
          <% @question.options.each do |opt| %>
              <% i += 1 %>
              <tr>
                <input type="hidden" name="options[<%= i %>][id]" value="<%= opt.id %>" />
                <td><input type="checkbox" name="options[<%= i %>][correct]" value="true"
                           <%= 'checked' if opt.correct %> />
                </td>

                <td>
                  <textarea name="options[<%= i %>][text]" placeholder="Answer..." /><%= opt.text %></textarea>
                  <textarea name="options[<%= i %>][explanation]" placeholder="Explanation..." /><%= opt.explanation %></textarea>
                </td>

                <!--
                <td><%= cktext_area "options["+i.to_s+"]", :text, :value => opt.text, :cols => 30, :ckeditor => {:placeholder => "Answer...",:toolbar => 'xs_mini'} %></td>
                <td><%= cktext_area "options["+i.to_s+"]", :explanation, :value => opt.explanation, :cols => 30, :ckeditor => {:placeholder => "Explanation...",:toolbar => 'xs_mini'} %></td>
                -->
              </tr>
          <% end %>
          <% if @question.options.size < 4 %>
              <% (4 - @question.options.size).times.each do %>
                  <% i += 1 %>
                  <tr>
                    <td><input name="options[<%= i %>][correct]" type="checkbox" /></td>
                    <td>
                      <textarea name="options[<%= i %>][text]" placeholder="Answer..." /></textarea>
                      <textarea name="options[<%= i %>][explanation]" placeholder="Explanation..." /></textarea>
                    </td>
                    <!--
                    <td><%= cktext_area "options["+i.to_s+"]", :text, :cols => 30, :ckeditor => {:placeholder => "Answer...",:toolbar => 'xs_mini'} %></td>
                    <td><%= cktext_area "options["+i.to_s+"]", :explanation, :cols => 30, :ckeditor => {:placeholder => "Explanation...",:toolbar => 'xs_mini'} %></td>
                    -->
                  </tr>
              <% end %>

          <% end %>
          <tr><td></td><td><a href='#' class="add-mcq-option">Add more choices</a></td></tr>
          <!--<tr><td></td><td><a href='#' class="add-mcq-option">Add more choices</a></td><td></td></tr> -->
          </tbody>
        </table>
      </div>
    </div>


    <%= f.button :form_submit,:id => 'btn_submit', cancel: :back %>
    <%= render :partial => "layouts/html_editor" %>
<% end %>


<script>
//Create auto complete multi select box
	//var concepts_list = [];	
	//$.ajax({
	//	    type: "POST",
	//	    dataType: "json",
	//	    async: false,
	//	    url: "<%= course_path(@course)%>" + "/tags/get_tag_list",
	//	    success: function(json) {	    	
	//	    	concepts_list = json;		    	
	//	    },
	//	    error: function(XMLHttpRequest, textStatus, errorThrown) { 
	 //       	alert("Status: " + textStatus + " Error: " + errorThrown); 
	 //   	}
	//	  });
	  
	$(document).ready(function(){
		$('div.group-tag-control').each( function() {
			var all_tags = JSON.parse($(this).find(".hdf-all-tags").val());
			var origin_tags = JSON.parse($(this).find(".hdf-original-tags").val());
			var textarea_id = $(this).find("textarea").attr("id");
			
			$("#" + textarea_id).textext({
				plugins : 'suggestions tags prompt autocomplete arrow filter',
				prompt : 'Add tags using concepts...',		
				suggestions: all_tags,
		    	ext: {
			        itemManager: {
			        	filter: function(list,query)
				        {	//over-drive filter with substring
				        	var result = [];
				            $.each(list, function(){
				            	if (this.toString().toLowerCase().indexOf(query.toLowerCase()) != -1){
				            		result.push(this.toString());
				            	}
				            });
				            //console.log(result);
				            return result;
				        }
			        }
			    }	    
			}).bind('isTagAllowed', function(e, data){
				var tagArray = $.parseJSON($("#" + textarea_id).textext()[0].hiddenInput().val());
				if ((textarea_id == "txtar_tagging_Difficulty" && tagArray.length >= 1) || tagArray.indexOf(data.tag) >= 0) {
			        data.result = false;
			    }else{
			    	//reset suggestion after choosing a tag
			    	textext = $(e.target).textext()[0];
			    	$(this).trigger(
			            'setSuggestions',
			           { result : textext.itemManager().filter(all_tags, "") }
	        		);		    
			    }	   
			});
			$("#" + textarea_id).textext()[0].tags().addTags(origin_tags);
		});
					
		$('#assessment_mcq_question_description').click();  
		$('#btn_submit').on("click",function() {	
			$('div.group-tag-control').each( function() {
				$(this).find(".hdf-new-tags").val(JSON.stringify(JSON.parse($(this).find("textarea").textext()[0].hiddenInput().val())));
				console.log($(this).find(".hdf-original-tags").val());
				console.log($(this).find(".hdf-new-tags").val());
			});		
		    	  
		  return true;		  
		});

        //////////////////////////////////////
        //advanced config for editor
        //////////////////////////////////////

        //Fixed EqnEditor Codecogs of CKeditor

        var EqnEditors = [];
        function ProcessEditors(clickElement) {

            // Readd all removed EqnEditors to the DOM.
            for (var i = 0; i < EqnEditors.length; ++i) {
                var editor = EqnEditors[i]
                $(editor.owner).append(editor);
            }

            var recur = 0;

            function UpdateEditor() {
            // Grab the cke dialog that just opened.
                var $visibleEditor = $('[name="CCEquationEditor"]:visible');

                recur++;
                if (recur >= 100) {
                    alert('Editor did not open.');
                    return;
                }

                // Also wait for the EqEditor and targetArea to spawn.  Sometimes this all happens too fast for the initial load.
                if ($visibleEditor.length === 0 || !window.EqEditor || !window.EqEditor.targetArea) {
                    setTimeout(UpdateEditor, 10);
                    return;
                }

                // Remove all non-visible EqnEditors from the DOM.  This hides their image maps, allowing proper menu selection for the remaining visible editor.
                $('[name="CCEquationEditor"]:not(:visible)').each(
                    function () {
                        var $this = $(this);

                        // Establish initial array storage of all editors
                        if (EqnEditors.indexOf($this[0]) === -1) {
                            EqnEditors.push($this[0]);
                        }

                        $this[0].owner = $this.parent()[0];
                        $this.remove();
                    }
                );

                // Redirect the input and preview fields.
                window.EqEditor.targetArea.equation_input = $visibleEditor.find('textarea')[0];
                window.EqEditor.targetArea.equation_preview =
                        $visibleEditor.find('img[id*="CCequ"]')[0];

                // If this is a click-in, set the initial values to the clicked image content.
                if (clickElement) {
                    $(window.EqEditor.targetArea.equation_input).val($(clickElement.target).attr('alt'));
                    $(window.EqEditor.targetArea.equation_preview).attr('src', $(clickElement.target).attr('src'));
                }
            };

            setTimeout(UpdateEditor, 10);
        };

        $(document).on('click', '.cke_button__eqneditor',
                function () {
                    // Initialize everything needed for the dblclick action when editing an existing equation in an editor.
                            $(this).parents('.cke_browser_gecko').find('iframe.cke_wysiwyg_frame').each(
                            function () {
                                var $contents = $(this).contents();
                                $contents.off('dblclick');
                                $contents.on('dblclick', 'img[src*="gif.latex"]', ProcessEditors);
                            }
                    );

                    // Go through each editor and do some magic hide-y swap-y stuff.
                    ProcessEditors();
                }
        );

        //Set default font & font size

        CKEDITOR.on( 'instanceReady', function( ev ) {
            //ev.editor.removeMenuItem('eqneditor');
            ev.editor.dataProcessor.htmlFilter.addRules({
                elements: {
                    p: function (e) { e.attributes.style = 'font-size:' + 16 + 'px; font-family:' + "Times New Roman" + ';'; }
                }
            });
         });

	});
</script>