<table style="width: 100%">
	<thead>
		<tr>
			<th style="line-height: 30px;">
				Topic Trees
				<% if can? :manage, Topicconcept%>
				<input type="button" class="btn btn-primary btn_add_topic_tree" value="Add Topic Tree" style="float: right">
				<% end %>
			</th>
			<th style="text-align: center">
				Dependency Model
			</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td style="width: 35%; padding-left: 10px; border: 1px solid #dddddd; vertical-align: top ">
				<div style="height: 400px; overflow-y: scroll">
					<div id="div_tree"></div>
				</div>
			</td>
			<td style="width: 63%; height:400px; border: 1px solid #dddddd; padding: 5px;">	
				<div>			
					<svg id="svg-concept" width=100% height=400>
						<g/>
					</svg>
				</div>
				<% if can? :manage, Topicconcept%>		
				<div id="div_edit_dpd" style="display: none;">
					<div id="div_action">
						<input style="float: right" type="button" id="btn_show_edit_required_concepts" class="btn btn-success btnmargined" value="Edit Required Concepts" onclick="show_edit_required_concepts()"/>
            <input style="float: right" type="button" id="btn_show_edit_concept_criterias" class="btn btnmargined" value="Edit Concept Progress Criteria" onclick="show_edit_concept_criterias();"/>
					</div>
					<div id="div_edit" style="display: none">
						<div>
							<textarea style="height: 28px" id="txtar_required_concepts" rows="1"></textarea>
						</div>
						<div style="margin-top: 2px;">
							<input style="float: right" type="button" id="btn_edit_required_concepts" class="btn btn-success" value="Finish" onclick="finish_edit_required_concepts()"/>
							<input style="float: right; margin-right: 5px;" type="button" id="btn_cancel_edit_required_concepts" class="btn" value="Cancel" onclick="cancel_edit_required_concepts()"/>
						</div>
					</div>
          <div id="div_criteria_update" style="display: none">
            <hr>
            <select id="criteria_relation_select" class="full-width">
            </select>
            <hr>
						<div style="margin-top: 2px;">
							<input style="float: right" type="button" id="btn_next_concept_criterias" class="btn btn-success" value="Next" onclick="edit_concept_criterias();"/>
							<input style="float: right; margin-right: 5px;" type="button" id="btn_cancel_concept_criterias" class="btn" value="Cancel" onclick="cancel_concept_criterias();"/>
						</div>
					</div>
          <div id="div_criteria_update_next" style="display: none">
            <hr>
            <div>
              <%= form_tag '/', class: 'form-horizontal' do %>
                <input type="hidden" id="concept_edge_id" name="concept_edge_id" value=""/>
                <div class='control-group'>
							    <%= label_tag 'enabled', 'Enabled:', class: 'control-label' %>
                  <div class='controls'>
							      <%= check_box_tag 'enabled', 'yes' %>
                  </div>
                </div>
                <div class='control-group'>
							    <%= label_tag 'correct_threshold', 'Correct threshold:', class: 'control-label' %>
                  <div class='controls'>
							      <%= number_field_tag 'correct_threshold', '0', class: 'input-medium' %>
                  </div>
                </div>
              <% end %>
              <div class="pseudo-pull-right-child">
                <input type="button" class="btn" value="Finish" onclick="finish_edit_concept_criterias()"/>
              </div>
						</div>
            <hr>
						<div style="margin-top: 2px;">
							<input style="float: right" type="button" id="btn_next_concept_criterias" class="btn btn-warning" value="Back" onclick="show_edit_concept_criterias();"/>
							<input style="float: right; margin-right: 5px;" type="button" id="btn_cancel_concept_criterias" class="btn" value="Cancel" onclick="cancel_concept_criterias();"/>
						</div>
					</div>
				</div>
				<% end %>
			</td>
		</tr>
	</tbody>
</table>
<script>
	


	var is_editing_required_concepts = false;
	var selected_node;
	var required_concepts = [];
	var concepts_list = [];
	
  <% if can? :manage, Topicconcept%>

  function reset_edit_console(){
    $('#div_edit').hide();
    $('#div_criteria_update').hide();
    $('#div_criteria_update_next').hide();
    $('#div_action').hide();
  }

  function default_edit_console(){
    $('#div_edit').hide();
    $('#div_criteria_update').hide();
    $('#div_criteria_update_next').hide();
    $('#div_action').show();
  }

	function finish_edit_required_concepts(){
		is_editing_required_concepts = false;
		$('#div_edit, #div_action').toggle();
    $('#div_criteria_update').hide();
    $('#div_criteria_update_next').hide();
		agoras = $('#txtar_required_concepts').textext()[0].hiddenInput().val();
		if(selected_node != null){
			var result = topic_concept_data_save_dependency(selected_node.id, JSON.stringify(required_concepts), JSON.stringify(JSON.parse(agoras)));
			generate_dependency_map(selected_node, result);	
		}
		
		$('li.jstree-leaf a').css('border', '0px');
		$('li.jstree-leaf a').css('background-color', '');
		
	}	
	
	function show_edit_required_concepts(){
		is_editing_required_concepts = true;
		$('#div_edit, #div_action').toggle();
    $('#div_criteria_update').hide();
    $('#div_criteria_update_next').hide();
		var tree = $("#div_tree").jstree(true);
		tree.open_all();
		$('li.jstree-leaf a').css('border', '1px solid white');
		$('li.jstree-leaf a').css('background-color', '#a0fc9e');		
		
		//load data and clear tags for auto complete multi select box again
		$('#txtar_required_concepts').textext()[0].ajax().load('');
		
		//!!! add one tag and then remove to active prompt after setting visible
		$('#txtar_required_concepts').textext()[0].tags().addTags([concepts_list[1]]);
		
		var elems = $('#txtar_required_concepts').textext()[0].tags().tagElements();
	    for(var i =0; i < elems.length;i++){
			$('#txtar_required_concepts').textext()[0].tags().removeTag($(elems[i]));
		}
		//load existing required concepts		
	  	if(required_concepts.length > 0){			
			$('#txtar_required_concepts').textext()[0].tags().addTags(required_concepts);			
		}
	}	
	
	function cancel_edit_required_concepts(){
		is_editing_required_concepts = false;
		$('#div_edit, #div_action').toggle();
    $('#div_criteria_update').hide();
    $('#div_criteria_update_next').hide();
		$('li.jstree-leaf a').css('border', '0px');
		$('li.jstree-leaf a').css('background-color', '');
	}
	
  function cancel_concept_criterias(){
    $('#div_edit').hide();
    $('#div_criteria_update').hide();
    $('#div_criteria_update_next').hide();
    $('#div_action').show();
  }

  function finish_edit_concept_criterias(){
    reset_edit_console();

    var enabled = $("#enabled").prop("checked");
    var correct_threshold = $("#correct_threshold").prop("value");
    var concept_edge_id = $("#concept_edge_id").prop("value");
    set_concept_edge_relation({concept_edge_id   : concept_edge_id,
                          correct_threshold : correct_threshold,
                          enabled           : enabled});
    show_edit_concept_criterias();
  }

  function edit_concept_criterias(){
    var value = $('#criteria_relation_select').prop('value');
    if (value != null){
      var result = get_concept_edge_relation({concept_edge_id : value});
      if (result != null)
			{
        $("#enabled").prop("checked", result.enabled);
        $("#correct_threshold").prop("value", result.correct_threshold);
        $("#concept_edge_id").prop("value", result.concept_edge_id);

		    $('#div_edit').hide();
		    $('#div_action').hide();
		    $('#div_criteria_update').hide();
		    $('#div_criteria_update_next').show();
			}
      else
      {
        alert('Criterias cannot be retrieved');
        cancel_concept_criterias();
      }
    }
    else {
      alert('No dependency selected');
      cancel_concept_criterias();
    }
  }

  function show_edit_concept_criterias(){
    if(selected_node != null){
      var result = get_concept_required_edges(selected_node.id);       

      if (result.dependencies.length != 0) {
        $('#criteria_relation_select').find('option').remove();
       	$.each(result.dependencies, function(i, dependency) {
          $('#criteria_relation_select').append('<option value="'+dependency.concept_edge_id+'">'+dependency.required_concept_name+' DEPENDENT ON '+result.current_concept.name+"</option>");
        }); 
        
        $('#div_edit').hide();
        $('#div_action').hide();
        $('#div_criteria_update_next').hide();
        $('#div_criteria_update').show();
      }
      else {
        alert('No dependency found for concept');
        cancel_concept_criterias();
      }
    }
  }

  <% end %>

	$(document).ready(function(){
		//set up add button
		$('input.btn_add_topic_tree').click(function() {
			var tree = $("#div_tree").jstree(true);
			var result = topic_concept_data_create("topic", null);
			if(!isNaN(result)){		  
				$node = tree.create_node('#',{"id" : result, "type" : "topic"});
                tree.edit($node);
            }
		});
				
		//Create auto complete multi select box
		$('#txtar_required_concepts').textext({
			plugins : 'tags prompt autocomplete arrow ajax filter',
			prompt : 'Add required concepts...',
			ajax : {
				url : '<%= course_path(@course)%>" + "/topicconcepts/get_concepts_list',
				type: "POST",
				async: false,
				dataType : 'json',
				cacheResults : true,
				data: {
					course_id: "<%= @course.id %>"
	    		}
	    	},
	    	ext: {
		        itemManager: {
		        	filter: function(list,query)
			        {
			        	var result = [];
			            $.each(list, function(){
			            	if (this.toString().toLowerCase().indexOf(query.toLowerCase()) != -1){
			            		result.push(this.toString());
			            	}
			            });
			            //console.log(result);
			            return result;
			        }
		        }
		    }	
		}).bind('isTagAllowed', function(e, data){			
			var tagArray = $.parseJSON($('#txtar_required_concepts').textext()[0].hiddenInput().val());
		    if (tagArray.indexOf(data.tag) >= 0) {
		        data.result = false;
		    }	
		    else{
		    	textext = $(e.target).textext()[0];		    	
		    	$(this).trigger(
		            'setSuggestions',
		           { result : textext.itemManager().filter(concepts_list, "") }
        		);		    
		    }	   
		});
				
	  //Create topic trees
	  var tcdata = get_topicconcept_data();
	  if(tcdata.user_ability != 'manage'){
	  	generate_entire_dependency_map(tcdata.nodelist, tcdata.edgelist);
	  }
	  var topictrees = [];
	  jQuery.each(tcdata.topictrees, function() {		  
		  topictrees.push({"id" : this.itc.id, "parent" : this.parent == null ? "#" : this.parent.id, "text" : this.itc.name,"type" : this.itc.typename});
		});
		
	  $('#div_tree').jstree({
	  	"core" : {
		    "animation" : 0,
		    "check_callback" : true,
		    "themes" : {"icons" : true, "dots" : true },
	    	'data' : topictrees		    
	    },
	    "types" : {
		    "#" : {
		      "max_children" : 20, 
		      "max_depth" : 20, 
		      "valid_children" : ["topic"]
		    },
		    "topic" : {
		      "icon" : "greentree",
		      "valid_children" : ["subtopic","concept"]
		    },
		    "subtopic" : {
		      "icon" : "greenbranch",
		      "valid_children" : ["subtopic","concept"]
		    },
		    "concept" : {
		      "icon" : "greenleaf",
		      "valid_children" : []
		    }
		},
	    "plugins" : [ "contextmenu","types", "dnd", "crrm","search", "themes"],
	    "contextmenu" : {
		    "items" : function (node) {
		    	if(tcdata.user_ability === 'manage'){
			    	var tree = $("#div_tree").jstree(true);
			        var items = {
			        	"create_subtopic" : {
			                "label" : "Create Subtopic",
			                "action" : function (obj) { var result = topic_concept_data_create("subtopic", node.id);
														if(!isNaN(result)){		  
														  	$node = tree.create_node(node,{"id" : result, "type" : "subtopic"});
	                    									tree.edit($node);
														} 		                							 
	                    							}
			            },
			            "create_concept" : {
			                "label" : "Create Concept",
			                "action" : function (obj) { var result = topic_concept_data_create("concept", node.id);
														if(!isNaN(result)){
			                							$node = tree.create_node(node,{"id" : result, "type" : "concept"});
	                    								tree.edit($node); 
	                    								}
	                    							}
			            },
			            "rename" : {	
			                "label" : "Rename",
			                "action" : function (obj) { tree.edit(node); }
			            },
			            "remove" : {
			                "label" : "Remove",
			                "action" : function (obj) { tree.delete_node(node); }
			            }
			        };
			        if($(node).attr("type")=="concept")
			        {
			        	delete items.create_subtopic;
			        	delete items.create_concept;
			        }
			        	
			        return items;
		       }
		    }
		}
	  });
	  
	  //select event handler
	  $('#div_tree').on('select_node.jstree', function (e, data) {
	  	if(data.node.type == 'concept'){
	  		default_edit_console();
	  		if(tcdata.user_ability === 'manage'){
		  		//show dependency map
		  		if(!is_editing_required_concepts){
		  		$('#div_edit_dpd').show();
		  		var result = topic_concept_data_dependency(data.node.id);
		  		generate_dependency_map(data.node, result.dependencies);		  		
		  		concepts_list  = result.concepts_list;
		  		selected_node = data.node;
		  		}else{
		  			$('#txtar_required_concepts').textext()[0].tags().addTags([data.node.text]);
		  		}
	  		}else{ // redaw dependency map	  	
	  			
			    var svgGroup = d3.select("svg#svg-concept g");	  
			    loc_x = parseInt($('#svg-concept').parent().width())/2 - parseInt(layout._nodes[data.node.id].value.x);
			    loc_y = parseInt($('#svg-concept').parent().height())/2 - parseInt(layout._nodes[data.node.id].value.y);
			    
			    zoom.scale(1);
	  			zoom.translate([loc_x, loc_y]);
	  			svgGroup.transition().duration(500).attr('transform', 'translate(' + zoom.translate() + ') scale(' + zoom.scale() + ')')
	  			selected_node = data.node;

	  		}
	  	}
	  });	  
	
	  if(tcdata.user_ability === 'manage'){
		  //rename event handler
		  $('#div_tree').on('rename_node.jstree', function (e, data) {
		  	if(data.text != data.old){
			  	var result = topic_concept_data_rename(data.node.id, data.text);
			  	if(isNaN(result)){
			  		alert("rename fails");
			  	}
			}
		  });
		  
		  //delete event handler
		  $('#div_tree').on('delete_node.jstree', function (e, data) {		  
			var result = topic_concept_data_delete(data.node.id, data.parent);
			if(isNaN(result)){
				alert("delete fails");
			}
			
		  });
		  
		  //move-drag&drop event handler
		  $('#div_tree').on('move_node.jstree', function (e, data) {
		  	var result = topic_concept_data_move(data.node.id, data.parent,data.old_parent, data.position);
			if(isNaN(result)){
				alert("delete fails");
			}		 
		  });
	   }
	});
	
	
	var zoom = null;
	var layout = null;
	function generate_entire_dependency_map(nodelist, edgelist){
		//Create graph
	  var gconcept = new dagreD3.Digraph();
	  $.each(nodelist, function(){	  	
	  	gconcept.addNode(this.id, { label: this.name});
	  });
	  $.each(edgelist, function(){
	  	gconcept.addEdge(null, this.required_id, this.dependent_id, { label: "required by" });
	  });
	  var renderer = new dagreD3.Renderer();	  
	  var layout_setting = dagreD3.layout();
	  layout = renderer.layout(layout_setting).run(gconcept, d3.select("svg#svg-concept g"));
	  
	  var svg = d3.select("svg#svg-concept");
	  var svgGroup = d3.select("svg#svg-concept g");
	  zoom = d3.behavior.zoom().on("zoom", function redraw() {	  	
	  	svgGroup.attr("transform","translate(" + (d3.event.translate[0]) + "," + (d3.event.translate[1]) + ")" + " scale(" + d3.event.scale + ")");		
	  });
	  svg.call(zoom);	  
	  
	  d3.selectAll("g.node.enter").on('click', function(d, i){
	  	  if(selected_node !=null && d==selected_node.id){
		  	window.location.replace("<%= course_path(@course)%>" + "/topicconcepts/"+ d +"/master");
		  }
	  	  $("#div_tree").jstree(true).deselect_node(selected_node, true);
		  $("#div_tree").jstree(true).select_node($("#div_tree").jstree(true).get_node(d),false,false);		  
		  
	  });

    d3.selectAll("g.node")
      .attr("title", get_topic_info)
      .each(function(d, i){
        $(this).tipsy({gravity: "w", opacity: 0.7, html: true});
    });
	}
	
	function generate_dependency_map(node,json_required_data){
	  required_concepts = [];
	  //Create graph
	  var gconcept = new dagreD3.Digraph();	  
	  gconcept.addNode(node.id, { label: node.text});
	  $.each(json_required_data, function(idx, obj) {
		gconcept.addNode(obj.id, { label: obj.name });
		gconcept.addEdge(null, obj.id, node.id, { label: "required by" });
		required_concepts.push(obj.name);
	  });	  
	  var renderer = new dagreD3.Renderer();	  
	  var layout_setting = dagreD3.layout();
	  var layout1 = renderer.layout(layout_setting).run(gconcept, d3.select("svg#svg-concept g"));	

	  var svg = d3.select("svg#svg-concept");
	  var svgGroup = d3.select("svg#svg-concept g");	  
	  var change_x = parseInt($('#svg-concept').parent().width())/2 - parseInt(layout1._nodes[node.id].value.x);
	  var change_y = parseInt($('#svg-concept').parent().height())/2 - parseInt(layout1._nodes[node.id].value.y);	   
	  svgGroup.attr("transform", "translate(" + change_x + "," + change_y + ")");
	  
	  svg.call(d3.behavior.zoom().on("zoom", function redraw() {	  	
	  	svgGroup.attr("transform",
		"translate(" + (d3.event.translate[0] + change_x) + "," + (d3.event.translate[1] + change_y) + ")"
		+ " scale(" + d3.event.scale + ")");
	  }));		

	  d3.selectAll("g.node.enter").on('click', function(d, i){
	  	  if(selected_node !=null && d==selected_node.id){
		  	window.location.replace("<%= course_path(@course)%>" + "/topicconcepts/"+ d +"/master");
		  }
	  	  $("#div_tree").jstree(true).deselect_node(selected_node, true);
		  $("#div_tree").jstree(true).select_node($("#div_tree").jstree(true).get_node(d),false,false);
		  
	  });

    d3.selectAll("g.node")
      .attr("title", get_topic_info)
      .each(function(d, i){
        $(this).tipsy({gravity: "w", opacity: 0.7, html: true});
    });  
	}
	
	//function redraw() {;
	//		
	//	    var translation = d3.event.translate,
	//	        newx = translation[0],
	//	        newy = translation[1];
	//	    	d3.select("svg#svg-concept g").attr("transform",
	//	        "translate(" + newx + "," + newy + ")" + " scale(" + d3.event.scale + ")");
	//	    console.log(translation[0] + " " + translation[1]);
	//	}
	
	function get_topicconcept_data(){
		var result;
		$.ajax({
	    type: "POST",
	    dataType: "json",
	    async: false,
	    url: "<%= course_path(@course)%>" + "/topicconcepts/get_topicconcept_data",
	    success: function(json) {	    	
	    	result = json; 
	    },
	    error: function(XMLHttpRequest, textStatus, errorThrown) { 
        	alert("Status: " + textStatus + " Error: " + errorThrown); 
    	}
	  });
	  return result;
	}
			
	function topic_concept_data_save_dependency(id,old_array,new_array){
		var result;
		$.ajax({
	    type: "POST",
	    dataType: "json",
	    async: false,
	    url: "<%= course_path(@course)%>" + "/topicconcepts/topic_concept_data_save_dependency",
	    data: {id: id,
	    	old_array: old_array,
	    	new_array: new_array
	    	},
	    success: function(json) {	    	
	    	result = json; 
	    },
	    error: function(XMLHttpRequest, textStatus, errorThrown) { 
        	alert("Status: " + textStatus + " Error: " + errorThrown); 
    	}
	  });
	  return result;
	}
	
	function topic_concept_data_dependency(id){
		var result;
		$.ajax({
	    type: "POST",
	    dataType: "json",
	    async: false,
	    url: "<%= course_path(@course)%>" + "/topicconcepts/topic_concept_data_dependency",
	    data: {id: id},
	    success: function(json) {	    	
	    	result = json; 
	    },
	    error: function(XMLHttpRequest, textStatus, errorThrown) { 
        	alert("Status: " + textStatus + " Error: " + errorThrown); 
    	}
	  });
	  return result;
	}
	
	function topic_concept_data_move(id,parent,old_parent,pos){
		var result;
		$.ajax({
	    type: "POST",
	    dataType: "json",
	    async: false,
	    url: "<%= course_path(@course)%>" + "/topicconcepts/topic_concept_data_move",
	    data: {
	    		id: id,
	    		parent: parent,
	    		old_parent: old_parent,
	    		pos: pos
	    },
	    success: function(json) {
	    	result = json.result; 
	    },
	    error: function(XMLHttpRequest, textStatus, errorThrown) { 
        	alert("Status: " + textStatus + " Error: " + errorThrown); 
    	}
	  });
	  return result;
	}
	
	function topic_concept_data_delete(id,parent){
		var result;
		$.ajax({
	    type: "POST",
	    dataType: "json",
	    async: false,
	    url: "<%= course_path(@course)%>" + "/topicconcepts/topic_concept_data_delete",
	    data: {
	    		id: id,
	    		parent: parent
	    },
	    success: function(json) {
	    	result = json.result; 
	    },
	    error: function(XMLHttpRequest, textStatus, errorThrown) { 
        	alert("Status: " + textStatus + " Error: " + errorThrown); 
    	}
	  });
	  return result;
	}
	
	
	function topic_concept_data_rename(id, text){
		var result;
		$.ajax({
	    type: "POST",
	    dataType: "json",
	    async: false,
	    url: "<%= course_path(@course)%>" + "/topicconcepts/topic_concept_data_rename",
	    data: {
	    		id: id,
	    		name: text
	    },
	    success: function(json) {
	    	result = json.result; 
	    },
	    error: function(XMLHttpRequest, textStatus, errorThrown) { 
        	alert("Status: " + textStatus + " Error: " + errorThrown); 
    	}
	  });
	  return result;
	}
	
	function topic_concept_data_create(typename, parent){
		var result;
		$.ajax({
	    type: "POST",
	    dataType: "json",
	    async: false,
	    url: "<%= course_path(@course)%>" + "/topicconcepts/topic_concept_data_create",
	    data: {
	    	topics_concept:{
	    		typename: typename,
	    		course_id: "<%= @course.id %>"},
	    	topic_edge:{
	    		parent_id: parent}
	    	},
	    success: function(json) {
	    	result = json.result; 
	    },
	    error: function(XMLHttpRequest, textStatus, errorThrown) { 
        	alert("Status: " + textStatus + " Error: " + errorThrown); 
    	}
	  });
	  return result;
	}
		
	function get_topic_info(concept_id, index){

    var result;
		$.ajax({
	    type: "POST",
	    dataType: "json",
	    async: false,
	    url: "<%= course_path(@course)%>" + "/topicconcepts/"+concept_id+"/get_topicconcept_rated_data",
	    success: function(json) {
	    	result = json; 
	    },
	    error: function(XMLHttpRequest, textStatus, errorThrown) { 
        	alert("Status: " + textStatus + " Error: " + errorThrown); 
    	}
	  });

	  return "<p class='name'>"+result.name+"</p>" + 
           "<div><p class='subtop'> Raw : <em class='sub'>"+result.raw_right+" / "+result.raw_total+"</em></p></div>" + 
           "<div><p class='subtop'> Latest : <em class='sub'>"+result.latest_right+" / "+result.latest_total+"</em></p></div>" + 
           "<div><p class='subtop'> Optimistic : <em class='sub'>"+result.optimistic_right+" / "+result.optimistic_total+"</em></p></div>" + 
           "<div><p class='subtop'> Pessimistic : <em class='sub'>"+result.pessimistic_right+" / "+result.pessimistic_total+"</em></p></div>";
  }

  function get_concept_edge_relation(data){
    var result;
    $.ajax({
	    type: "POST",
	    dataType: "json",
      data: data,
	    async: false,
	    url: "<%= get_concept_edge_relation_course_assessment_guidance_quizzes_path(@course) %>",
	    success: function(json) {
	    	result = json;
	    },
	    error: function(XMLHttpRequest, textStatus, errorThrown) { 
        alert("Status: " + textStatus + " Error: " + errorThrown); 
    	}
	  });
    return result;
	}

  function set_concept_edge_relation(data){
    $.ajax({
	    type: "POST",
	    dataType: "json",
      data: data,
	    async: false,
	    url: "<%= set_concept_edge_relation_course_assessment_guidance_quizzes_path(@course) %>",
	    success: function(json) {
	    	alert(json.result);
	    },
	    error: function(XMLHttpRequest, textStatus, errorThrown) { 
        	alert("Status: " + textStatus + " Error: " + errorThrown); 
    	}
	  });
	}

  function get_concept_required_edges(id){
		var result;
		$.ajax({
	    type: "POST",
	    dataType: "json",
	    async: false,
	    url: "<%= get_concept_required_edges_course_topicconcepts_path(@course)%>",
	    data: {id: id},
	    success: function(json) {	    	
	    	result = json; 
	    },
	    error: function(XMLHttpRequest, textStatus, errorThrown) { 
        	alert("Status: " + textStatus + " Error: " + errorThrown); 
    	}
	  });
	  return result;
	}
</script>
